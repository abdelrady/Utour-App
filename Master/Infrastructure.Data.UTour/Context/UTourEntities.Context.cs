//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Data.Objects;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using ITI.Common.Utilities.Domain.Core.Entities;
using Domain.DataContracts;
using ITI.Nlayerd.Infrastructure.Data.UTour.UnitOfWork;

namespace ITI.Nlayerd.Infrastructure.Data.UTour.Context
{
    public partial class UTOURDBEntities : ObjectContext, IUTourUnitOfWork
    {
        public const string ConnectionString = "name=UTOURDBEntities";
        public const string ContainerName = "UTOURDBEntities";
    
        #region Constructors
    
        public UTOURDBEntities()
            : base(ConnectionString, ContainerName)
        {
            Initialize();
        }
    
        public UTOURDBEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            Initialize();
        }
    
        public UTOURDBEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            Initialize();
        }
    
        private void Initialize()
        {
            // Creating proxies requires the use of the ProxyDataContractResolver and
            // may allow lazy loading which can expand the loaded graph during serialization.
            ContextOptions.ProxyCreationEnabled = false;
            ObjectMaterialized += new ObjectMaterializedEventHandler(HandleObjectMaterialized);
        }
    
        private void HandleObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            var entity = e.Entity as IObjectWithChangeTracker;
            if (entity != null)
            {
                bool changeTrackingEnabled = entity.ChangeTracker.ChangeTrackingEnabled;
                try
                {
                    entity.MarkAsUnchanged();
                }
                finally
                {
                    entity.ChangeTracker.ChangeTrackingEnabled = changeTrackingEnabled;
                }
                this.StoreReferenceKeyValues(entity);
            }
        }
    
        #endregion
    
    	    #region IUTourUnitOfWork
    	
    	public  IObjectSet<TEntity> CreateSet<TEntity>() 
    		where TEntity : class,IObjectWithChangeTracker
    	{
    		return base.CreateObjectSet<TEntity>() as IObjectSet<TEntity>;
    	}
    	public void RegisterChanges<TEntity>(TEntity item)
    		where TEntity : class, IObjectWithChangeTracker
    	{
    		this.CreateObjectSet<TEntity>().ApplyChanges(item);
    	}
    	public void CommitAndRefreshChanges()
    	{
    		try
    		{
    			//Default option is DetectChangesBeforeSave
    			base.SaveChanges();
    			
    			//accept all changes in STE entities attached in context
                IEnumerable<IObjectWithChangeTracker> steEntities = (from entry in 
    																	this.ObjectStateManager.GetObjectStateEntries(~EntityState.Detached)
                                                                     where 
    																 	entry.Entity != null 
    																 && 
    																 	(entry.Entity as IObjectWithChangeTracker != null)
                                                                     select
    																 	entry.Entity as IObjectWithChangeTracker);
    
                steEntities.ToList().ForEach(ste => ste.MarkAsUnchanged());
    		}
    		catch (OptimisticConcurrencyException ex)
    		{
    			
    			//if client wins refresh data ( queries database and adapt original values
    			//and re-save changes in client
    			base.Refresh(RefreshMode.ClientWins, ex.StateEntries.Select(se => se.Entity));
    			
    			base.SaveChanges(); 
    			
    			//accept all changes in STE entities attached in context
                IEnumerable<IObjectWithChangeTracker> steEntities = (from entry in 
    																	this.ObjectStateManager.GetObjectStateEntries(~EntityState.Detached)
                                                                     where 
    																 	entry.Entity != null 
    																 && 
    																 	(entry.Entity as IObjectWithChangeTracker != null)
                                                                     select
    																 	entry.Entity as IObjectWithChangeTracker);
    
                steEntities.ToList().ForEach(ste => ste.MarkAsUnchanged());
    		}
    	}
    	public  void Commit()
    	{
    		//Default option is DetectChangesBeforeSave
    		base.SaveChanges();
    		
    		//accept all changes in STE entities attached in context
    		IEnumerable<IObjectWithChangeTracker> steEntities = (from entry in 
    																	this.ObjectStateManager.GetObjectStateEntries(~EntityState.Detached)
                                                                     where 
    																 	entry.Entity != null 
    																 && 
    																 	(entry.Entity as IObjectWithChangeTracker != null)
                                                                     select
    																 	entry.Entity as IObjectWithChangeTracker);
    
    		steEntities.ToList().ForEach(ste => ste.MarkAsUnchanged());
    	}
    	public void RollbackChanges()
    	{
    		//Refresh context and override changes
                
    		IEnumerable<object> itemsToRefresh = base.ObjectStateManager.GetObjectStateEntries(EntityState.Modified)
                                                                        .Where(ose=>!ose.IsRelationship && ose.Entity != null)
                                                                        .Select(ose=>ose.Entity);
            base.Refresh(RefreshMode.StoreWins, itemsToRefresh);
    	}
    	public IEnumerable<TEntity> ExecuteQuery<TEntity>(string sqlQuery, params object[] parameters)
        {
    		return base.ExecuteStoreQuery<TEntity>(sqlQuery, parameters);
       	}
    
    	public int ExecuteCommand(string sqlCommand, params object[] parameters)
    	{
    		return base.ExecuteStoreCommand(sqlCommand, parameters);
    	}
    	

        #endregion

    
            #region ObjectSet Properties
    
        public IObjectSet<Admin_Users> Admin_Users
        {
            get { return _admin_Users  ?? (_admin_Users = CreateObjectSet<Admin_Users>("Admin_Users")); }
        }
        private ObjectSet<Admin_Users> _admin_Users;
    
        public IObjectSet<city> cities
        {
            get { return _cities  ?? (_cities = CreateObjectSet<city>("cities")); }
        }
        private ObjectSet<city> _cities;
    
        public IObjectSet<LayerTable> LayerTables
        {
            get { return _layerTables  ?? (_layerTables = CreateObjectSet<LayerTable>("LayerTables")); }
        }
        private ObjectSet<LayerTable> _layerTables;
    
        public IObjectSet<Monument_Ratings> Monument_Ratings
        {
            get { return _monument_Ratings  ?? (_monument_Ratings = CreateObjectSet<Monument_Ratings>("Monument_Ratings")); }
        }
        private ObjectSet<Monument_Ratings> _monument_Ratings;
    
        public IObjectSet<Monuments_Photos> Monuments_Photos
        {
            get { return _monuments_Photos  ?? (_monuments_Photos = CreateObjectSet<Monuments_Photos>("Monuments_Photos")); }
        }
        private ObjectSet<Monuments_Photos> _monuments_Photos;
    
        public IObjectSet<Monuments_Reviews> Monuments_Reviews
        {
            get { return _monuments_Reviews  ?? (_monuments_Reviews = CreateObjectSet<Monuments_Reviews>("Monuments_Reviews")); }
        }
        private ObjectSet<Monuments_Reviews> _monuments_Reviews;
    
        public IObjectSet<Monuments_Videos> Monuments_Videos
        {
            get { return _monuments_Videos  ?? (_monuments_Videos = CreateObjectSet<Monuments_Videos>("Monuments_Videos")); }
        }
        private ObjectSet<Monuments_Videos> _monuments_Videos;
    
        public IObjectSet<sysdiagram> sysdiagrams
        {
            get { return _sysdiagrams  ?? (_sysdiagrams = CreateObjectSet<sysdiagram>("sysdiagrams")); }
        }
        private ObjectSet<sysdiagram> _sysdiagrams;
    
        public IObjectSet<Tourist> Tourists
        {
            get { return _tourists  ?? (_tourists = CreateObjectSet<Tourist>("Tourists")); }
        }
        private ObjectSet<Tourist> _tourists;
    
        public IObjectSet<webpages_Membership> webpages_Membership
        {
            get { return _webpages_Membership  ?? (_webpages_Membership = CreateObjectSet<webpages_Membership>("webpages_Membership")); }
        }
        private ObjectSet<webpages_Membership> _webpages_Membership;
    
        public IObjectSet<webpages_OAuthMembership> webpages_OAuthMembership
        {
            get { return _webpages_OAuthMembership  ?? (_webpages_OAuthMembership = CreateObjectSet<webpages_OAuthMembership>("webpages_OAuthMembership")); }
        }
        private ObjectSet<webpages_OAuthMembership> _webpages_OAuthMembership;
    
        public IObjectSet<webpages_Roles> webpages_Roles
        {
            get { return _webpages_Roles  ?? (_webpages_Roles = CreateObjectSet<webpages_Roles>("webpages_Roles")); }
        }
        private ObjectSet<webpages_Roles> _webpages_Roles;
    
        public IObjectSet<UserProfile> UserProfiles
        {
            get { return _userProfiles  ?? (_userProfiles = CreateObjectSet<UserProfile>("UserProfiles")); }
        }
        private ObjectSet<UserProfile> _userProfiles;
    
        public IObjectSet<UploadedPhoto> UploadedPhotos
        {
            get { return _uploadedPhotos  ?? (_uploadedPhotos = CreateObjectSet<UploadedPhoto>("UploadedPhotos")); }
        }
        private ObjectSet<UploadedPhoto> _uploadedPhotos;
    
        public IObjectSet<layerhotspot> layerhotspots
        {
            get { return _layerhotspots  ?? (_layerhotspots = CreateObjectSet<layerhotspot>("layerhotspots")); }
        }
        private ObjectSet<layerhotspot> _layerhotspots;

            #endregion

    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using ITI.Common.Utilities.Domain.Core.Entities;

namespace Domain.DataContracts
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Monument_Ratings))]
    [KnownType(typeof(Monuments_Reviews))]
    [KnownType(typeof(UploadedPhoto))]
    public partial class Tourist: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public string UserName
        {
            get { return _userName; }
            set
            {
                if (_userName != value)
                {
                    _userName = value;
                    OnPropertyChanged("UserName");
                }
            }
        }
        private string _userName;
    
        [DataMember]
        public string Password
        {
            get { return _password; }
            set
            {
                if (_password != value)
                {
                    _password = value;
                    OnPropertyChanged("Password");
                }
            }
        }
        private string _password;
    
        [DataMember]
        public string First_Name
        {
            get { return _first_Name; }
            set
            {
                if (_first_Name != value)
                {
                    _first_Name = value;
                    OnPropertyChanged("First_Name");
                }
            }
        }
        private string _first_Name;
    
        [DataMember]
        public string Last_Name
        {
            get { return _last_Name; }
            set
            {
                if (_last_Name != value)
                {
                    _last_Name = value;
                    OnPropertyChanged("Last_Name");
                }
            }
        }
        private string _last_Name;
    
        [DataMember]
        public Nullable<bool> Gender
        {
            get { return _gender; }
            set
            {
                if (_gender != value)
                {
                    _gender = value;
                    OnPropertyChanged("Gender");
                }
            }
        }
        private Nullable<bool> _gender;
    
        [DataMember]
        public string Nationality
        {
            get { return _nationality; }
            set
            {
                if (_nationality != value)
                {
                    _nationality = value;
                    OnPropertyChanged("Nationality");
                }
            }
        }
        private string _nationality;
    
        [DataMember]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    OnPropertyChanged("Email");
                }
            }
        }
        private string _email;
    
        [DataMember]
        public string Preferred_Language
        {
            get { return _preferred_Language; }
            set
            {
                if (_preferred_Language != value)
                {
                    _preferred_Language = value;
                    OnPropertyChanged("Preferred_Language");
                }
            }
        }
        private string _preferred_Language;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Monument_Ratings> Monument_Ratings
        {
            get
            {
                if (_monument_Ratings == null)
                {
                    _monument_Ratings = new TrackableCollection<Monument_Ratings>();
                    _monument_Ratings.CollectionChanged += FixupMonument_Ratings;
                }
                return _monument_Ratings;
            }
            set
            {
                if (!ReferenceEquals(_monument_Ratings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_monument_Ratings != null)
                    {
                        _monument_Ratings.CollectionChanged -= FixupMonument_Ratings;
                    }
                    _monument_Ratings = value;
                    if (_monument_Ratings != null)
                    {
                        _monument_Ratings.CollectionChanged += FixupMonument_Ratings;
                    }
                    OnNavigationPropertyChanged("Monument_Ratings");
                }
            }
        }
        private TrackableCollection<Monument_Ratings> _monument_Ratings;
    
        [DataMember]
        public TrackableCollection<Monuments_Reviews> Monuments_Reviews
        {
            get
            {
                if (_monuments_Reviews == null)
                {
                    _monuments_Reviews = new TrackableCollection<Monuments_Reviews>();
                    _monuments_Reviews.CollectionChanged += FixupMonuments_Reviews;
                }
                return _monuments_Reviews;
            }
            set
            {
                if (!ReferenceEquals(_monuments_Reviews, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_monuments_Reviews != null)
                    {
                        _monuments_Reviews.CollectionChanged -= FixupMonuments_Reviews;
                    }
                    _monuments_Reviews = value;
                    if (_monuments_Reviews != null)
                    {
                        _monuments_Reviews.CollectionChanged += FixupMonuments_Reviews;
                    }
                    OnNavigationPropertyChanged("Monuments_Reviews");
                }
            }
        }
        private TrackableCollection<Monuments_Reviews> _monuments_Reviews;
    
        [DataMember]
        public TrackableCollection<UploadedPhoto> UploadedPhotos
        {
            get
            {
                if (_uploadedPhotos == null)
                {
                    _uploadedPhotos = new TrackableCollection<UploadedPhoto>();
                    _uploadedPhotos.CollectionChanged += FixupUploadedPhotos;
                }
                return _uploadedPhotos;
            }
            set
            {
                if (!ReferenceEquals(_uploadedPhotos, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_uploadedPhotos != null)
                    {
                        _uploadedPhotos.CollectionChanged -= FixupUploadedPhotos;
                    }
                    _uploadedPhotos = value;
                    if (_uploadedPhotos != null)
                    {
                        _uploadedPhotos.CollectionChanged += FixupUploadedPhotos;
                    }
                    OnNavigationPropertyChanged("UploadedPhotos");
                }
            }
        }
        private TrackableCollection<UploadedPhoto> _uploadedPhotos;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Monument_Ratings.Clear();
            Monuments_Reviews.Clear();
            UploadedPhotos.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupMonument_Ratings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Monument_Ratings item in e.NewItems)
                {
                    item.Tourist = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Monument_Ratings", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Monument_Ratings item in e.OldItems)
                {
                    if (ReferenceEquals(item.Tourist, this))
                    {
                        item.Tourist = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Monument_Ratings", item);
                    }
                }
            }
        }
    
        private void FixupMonuments_Reviews(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Monuments_Reviews item in e.NewItems)
                {
                    item.Tourist = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Monuments_Reviews", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Monuments_Reviews item in e.OldItems)
                {
                    if (ReferenceEquals(item.Tourist, this))
                    {
                        item.Tourist = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Monuments_Reviews", item);
                    }
                }
            }
        }
    
        private void FixupUploadedPhotos(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (UploadedPhoto item in e.NewItems)
                {
                    item.Tourist = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("UploadedPhotos", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UploadedPhoto item in e.OldItems)
                {
                    if (ReferenceEquals(item.Tourist, this))
                    {
                        item.Tourist = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("UploadedPhotos", item);
                    }
                }
            }
        }

        #endregion

    }
}

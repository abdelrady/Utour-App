//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using ITI.Common.Utilities.Domain.Core.Entities;

namespace Domain.DataContracts
{
    [DataContract(IsReference = true)]
    public partial class LayerTable: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private string _id;
    
        [DataMember]
        public string footnote
        {
            get { return _footnote; }
            set
            {
                if (_footnote != value)
                {
                    _footnote = value;
                    OnPropertyChanged("footnote");
                }
            }
        }
        private string _footnote;
    
        [DataMember]
        public string title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    _title = value;
                    OnPropertyChanged("title");
                }
            }
        }
        private string _title;
    
        [DataMember]
        public Nullable<decimal> lat
        {
            get { return _lat; }
            set
            {
                if (_lat != value)
                {
                    _lat = value;
                    OnPropertyChanged("lat");
                }
            }
        }
        private Nullable<decimal> _lat;
    
        [DataMember]
        public Nullable<decimal> lon
        {
            get { return _lon; }
            set
            {
                if (_lon != value)
                {
                    _lon = value;
                    OnPropertyChanged("lon");
                }
            }
        }
        private Nullable<decimal> _lon;
    
        [DataMember]
        public string imageurl
        {
            get { return _imageurl; }
            set
            {
                if (_imageurl != value)
                {
                    _imageurl = value;
                    OnPropertyChanged("imageurl");
                }
            }
        }
        private string _imageurl;
    
        [DataMember]
        public string description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public string biwStyle
        {
            get { return _biwStyle; }
            set
            {
                if (_biwStyle != value)
                {
                    _biwStyle = value;
                    OnPropertyChanged("biwStyle");
                }
            }
        }
        private string _biwStyle;
    
        [DataMember]
        public Nullable<int> alt
        {
            get { return _alt; }
            set
            {
                if (_alt != value)
                {
                    _alt = value;
                    OnPropertyChanged("alt");
                }
            }
        }
        private Nullable<int> _alt;
    
        [DataMember]
        public Nullable<byte> doNotIndex
        {
            get { return _doNotIndex; }
            set
            {
                if (_doNotIndex != value)
                {
                    _doNotIndex = value;
                    OnPropertyChanged("doNotIndex");
                }
            }
        }
        private Nullable<byte> _doNotIndex;
    
        [DataMember]
        public Nullable<byte> showSmallBiw
        {
            get { return _showSmallBiw; }
            set
            {
                if (_showSmallBiw != value)
                {
                    _showSmallBiw = value;
                    OnPropertyChanged("showSmallBiw");
                }
            }
        }
        private Nullable<byte> _showSmallBiw;
    
        [DataMember]
        public Nullable<byte> showBiwOnClick
        {
            get { return _showBiwOnClick; }
            set
            {
                if (_showBiwOnClick != value)
                {
                    _showBiwOnClick = value;
                    OnPropertyChanged("showBiwOnClick");
                }
            }
        }
        private Nullable<byte> _showBiwOnClick;
    
        [DataMember]
        public string poiType
        {
            get { return _poiType; }
            set
            {
                if (_poiType != value)
                {
                    _poiType = value;
                    OnPropertyChanged("poiType");
                }
            }
        }
        private string _poiType;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
